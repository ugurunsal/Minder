// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Minder.Model;

#nullable disable

namespace Minder.Migrations
{
    [DbContext(typeof(MinderDBContext))]
    [Migration("20220321035459_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.1.22076.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Minder.Model.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ugurunsal@gmail.com",
                            IsBlocked = false,
                            IsVisible = true,
                            Password = "123456",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "onurunsal@gmail.com",
                            IsBlocked = false,
                            IsVisible = true,
                            Password = "123456",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "utkudemir@gmail.com",
                            IsBlocked = false,
                            IsVisible = true,
                            Password = "123456",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Email = "ersenuncu@gmail.com",
                            IsBlocked = false,
                            IsVisible = true,
                            Password = "123456",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Email = "ozgurozturk@gmail.com",
                            IsBlocked = false,
                            IsVisible = true,
                            Password = "123456",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Email = "idilnihan@gmail.com",
                            IsBlocked = false,
                            IsVisible = true,
                            Password = "654321",
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            Email = "setenay@gmail.com",
                            IsBlocked = false,
                            IsVisible = true,
                            Password = "654321",
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            Email = "goksenbakay@gmail.com",
                            IsBlocked = false,
                            IsVisible = true,
                            Password = "654321",
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            Email = "seymadeveci@gmail.com",
                            IsBlocked = false,
                            IsVisible = true,
                            Password = "654321",
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            Email = "alarasakarya@gmail.com",
                            IsBlocked = false,
                            IsVisible = true,
                            Password = "654321",
                            UserId = 10
                        });
                });

            modelBuilder.Entity("Minder.Model.DiscoverySetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DistancePreference")
                        .HasColumnType("int");

                    b.Property<int>("GenderPreference")
                        .HasColumnType("int");

                    b.Property<int>("MaxAgePreference")
                        .HasColumnType("int");

                    b.Property<int>("MinAgePreference")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DiscoverySettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DistancePreference = 100,
                            GenderPreference = 1,
                            MaxAgePreference = 28,
                            MinAgePreference = 18,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DistancePreference = 100,
                            GenderPreference = 1,
                            MaxAgePreference = 28,
                            MinAgePreference = 18,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            DistancePreference = 100,
                            GenderPreference = 1,
                            MaxAgePreference = 28,
                            MinAgePreference = 18,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            DistancePreference = 100,
                            GenderPreference = 1,
                            MaxAgePreference = 28,
                            MinAgePreference = 18,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            DistancePreference = 100,
                            GenderPreference = 1,
                            MaxAgePreference = 28,
                            MinAgePreference = 18,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            DistancePreference = 100,
                            GenderPreference = 0,
                            MaxAgePreference = 28,
                            MinAgePreference = 18,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            DistancePreference = 100,
                            GenderPreference = 0,
                            MaxAgePreference = 28,
                            MinAgePreference = 18,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            DistancePreference = 100,
                            GenderPreference = 0,
                            MaxAgePreference = 28,
                            MinAgePreference = 18,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            DistancePreference = 100,
                            GenderPreference = 0,
                            MaxAgePreference = 28,
                            MinAgePreference = 18,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            DistancePreference = 100,
                            GenderPreference = 0,
                            MaxAgePreference = 28,
                            MinAgePreference = 18,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("Minder.Model.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDislike")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMatch")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MatchDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MatchedUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Minder.Model.Passion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Passion");
                });

            modelBuilder.Entity("Minder.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AboutMe")
                        .HasColumnType("longtext");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Company")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<string>("LivingIn")
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<double>("Longtitude")
                        .HasColumnType("double");

                    b.Property<string>("School")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            BirthDate = new DateTime(1999, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ugur",
                            Gender = 0,
                            LastName = "Unsal",
                            Latitude = 41.065006179484264,
                            Longtitude = 28.99362576838913
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            BirthDate = new DateTime(1997, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Onur",
                            Gender = 0,
                            LastName = "Unsal",
                            Latitude = 40.991271937094083,
                            Longtitude = 28.83275948060281
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 3,
                            BirthDate = new DateTime(1990, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Utku",
                            Gender = 0,
                            LastName = "Demir",
                            Latitude = 41.086011370754782,
                            Longtitude = 28.276755762445031
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 4,
                            BirthDate = new DateTime(1980, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ersen",
                            Gender = 0,
                            LastName = "Uncu",
                            Latitude = 41.213846436184397,
                            Longtitude = 28.765439420948827
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 5,
                            BirthDate = new DateTime(2004, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ozgur",
                            Gender = 0,
                            LastName = "Ozturk",
                            Latitude = 40.806779694918674,
                            Longtitude = 29.35884100723468
                        },
                        new
                        {
                            Id = 6,
                            AccountId = 6,
                            BirthDate = new DateTime(2003, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "İdil",
                            Gender = 1,
                            LastName = "Nihan",
                            Latitude = 41.06150009946095,
                            Longtitude = 28.999743808045224
                        },
                        new
                        {
                            Id = 7,
                            AccountId = 7,
                            BirthDate = new DateTime(1995, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Setenay",
                            Gender = 1,
                            LastName = "Eyigun",
                            Latitude = 40.976113655976135,
                            Longtitude = 28.730090714252068
                        },
                        new
                        {
                            Id = 8,
                            AccountId = 8,
                            BirthDate = new DateTime(1990, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Goksen",
                            Gender = 1,
                            LastName = "Bakay",
                            Latitude = 41.078791954503508,
                            Longtitude = 28.302878176490744
                        },
                        new
                        {
                            Id = 9,
                            AccountId = 9,
                            BirthDate = new DateTime(1985, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Seyma",
                            Gender = 1,
                            LastName = "Deveci",
                            Latitude = 40.136680128545606,
                            Longtitude = 29.046779860031538
                        },
                        new
                        {
                            Id = 10,
                            AccountId = 10,
                            BirthDate = new DateTime(1970, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alara",
                            Gender = 1,
                            LastName = "Sakarya",
                            Latitude = 40.850822025300388,
                            Longtitude = 30.115398352304844
                        });
                });

            modelBuilder.Entity("Minder.Model.Account", b =>
                {
                    b.HasOne("Minder.Model.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("Minder.Model.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Minder.Model.DiscoverySetting", b =>
                {
                    b.HasOne("Minder.Model.User", "User")
                        .WithOne("DiscoverySettings")
                        .HasForeignKey("Minder.Model.DiscoverySetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Minder.Model.Passion", b =>
                {
                    b.HasOne("Minder.Model.User", null)
                        .WithMany("Passion")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Minder.Model.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("DiscoverySettings");

                    b.Navigation("Passion");
                });
#pragma warning restore 612, 618
        }
    }
}
